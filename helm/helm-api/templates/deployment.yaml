apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.api.name }}
  labels:
    app: api
spec:
  replicas: {{ .Values.api.replicas}}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ .Values.api.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.api.name }}
    spec:
      containers:
      - name: {{ .Values.api.name }}
        image: "{{ .Values.api.image }}:{{ .Values.api.tag }}"
        ports:
        - containerPort: {{ .Values.api.port }}
        env:
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: PORT
        - name: DB
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DB
        - name: DBUSER
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DBUSER
        - name: DBHOST
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DBHOST
        - name: DBPORT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: DBPORT
        - name: DBPASS
          valueFrom:
            secretKeyRef:
              name: api-secret
              key: DBPASS
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.api.port }}
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.api.port }}
          initialDelaySeconds: 10
          periodSeconds: 10